name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]
        runtime: [win-x64, win-x86]  # Removed win-arm

    runs-on: windows-latest

    env:
      Solution_Name: StockNote.IO.sln  # Replace with your solution name

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Restore dependencies
      run: dotnet restore ${{ env.Solution_Name }}

    - name: Build
      run: dotnet build ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }}

    - name: Publish
      run: dotnet publish ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }} --runtime ${{ matrix.runtime }} --output ${{ github.workspace }}/publish_output_${{ matrix.runtime }}

    - name: Generate self-signed certificate
      run: |
        $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=YourCompany" -CertStoreLocation "Cert:\CurrentUser\My"
        $password = ConvertTo-SecureString -String "YourPassword" -Force -AsPlainText
        Export-PfxCertificate -Cert $cert -FilePath ${{ github.workspace }}/GitHubActionsWorkflow.pfx -Password $password

    - name: Sign the application
      run: |
        $timestampServer = "http://timestamp.digicert.com"
        $certPath = "${{ github.workspace }}/GitHubActionsWorkflow.pfx"
        $certPass = "YourPassword"
        $signTool = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe"
        $filesToSign = Get-ChildItem -Path ${{ github.workspace }}/publish_output_${{ matrix.runtime }} -Filter "*.dll,*.exe" -Recurse
        foreach ($file in $filesToSign) {
          & $signTool sign /f $certPath /p $certPass /tr $timestampServer /td sha256 /fd sha256 $file.FullName
        }

    - name: Compress build artifacts
      run: |
        Compress-Archive -Path ${{ github.workspace }}/publish_output_${{ matrix.runtime }}\* -DestinationPath ${{ github.workspace }}/release_package_${{ matrix.runtime }}.zip
        echo "Contents of the current directory after compression:"
        Get-ChildItem ${{ github.workspace }}

    - name: Verify ZIP file exists
      run: |
        if (Test-Path ${{ github.workspace }}/release_package_${{ matrix.runtime }}.zip) {
          echo "ZIP file exists"
        } else {
          echo "ZIP file does not exist"
          exit 1
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Release Package ${{ matrix.runtime }}
        path: ${{ github.workspace }}/release_package_${{ matrix.runtime }}.zip
        if-no-files-found: warn
        compression-level: 6
        overwrite: true

    - name: Remove the pfx
      run: Remove-Item -path ${{ github.workspace }}/GitHubActionsWorkflow.pfx

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download build artifacts x64
      uses: actions/download-artifact@v4
      with:
        name: Release Package win-x64
        path: ./release_package/win-x64.zip

    - name: Download build artifacts x86
      uses: actions/download-artifact@v4
      with:
        name: Release Package win-x86
        path: ./release_package/win-x86.zip

    - name: Create dynamic version tag
      id: tag_version
      run: echo ::set-output name=tag::v1.0.0-$(date +'%Y%m%d%H%M%S')

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: ${{ steps.tag_version.outputs.tag }}  # Use dynamic tag name
        release_name: Release ${{ steps.tag_version.outputs.tag }}  # Use dynamic release name
        draft: false
        prerelease: false

    - name: Upload Release Asset x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release_package/win-x64.zip
        asset_name: release_package_win-x64.zip
        asset_content_type: application/zip

    - name: Upload Release Asset x86
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release_package/win-x86.zip
        asset_name: release_package_win-x86.zip
        asset_content_type: application/zip
